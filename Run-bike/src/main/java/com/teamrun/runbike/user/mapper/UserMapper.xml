<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.teamrun.runbike.user.dao.UserDao">

<resultMap id="userInfoMap" type="com.teamrun.runbike.user.domain.UserInfo">
	<id property="u_idx" column="u_idx" />
	<result property="u_id" column="u_id" />
	<result property="u_pw" column="u_pw" />
	<result property="u_name" column="u_name" />
	<result property="u_photo" column="u_photo" />
	<result property="regdate" column="regdate" />
	<result property="u_code" column="u_code" />
	<result property="u_sns" column="u_sns" />
</resultMap>

<resultMap type="com.teamrun.runbike.user.domain.LoginLogInfo" id="loginLogInfoMap">
	<id property="u_idx" column="u_idx" />
	<result property="login_date" column="login_date" />
</resultMap>

<select id="chkLoginLog" parameterType="hashmap" resultType="int">
select count(*) as login_date from run_bike.login_log where u_idx = #{u_idx} and login_date = #{date};
</select>

<insert id="insertUser" parameterType="com.teamrun.runbike.user.domain.UserInfo">
	insert into user (u_id, u_pw, u_name, u_photo, regdate, u_code) values(#{u_id},#{u_pw},#{u_name},#{u_photo}, #{regdate},#{u_code}) 
</insert>
<insert id="insertLoginDate">
	INSERT INTO run_bike.login_log VALUES(#{u_idx}, date_format(now(),'%Y-%m-%d'));
</insert>
<update id="chkVerify">
	update user set u_verify=true where u_id=#{param1} and u_code = #{param2}
</update>

<update id="editUser" parameterType="com.teamrun.runbike.user.domain.UserInfo">
	update user set u_pw=#{u_pw}, u_name=#{u_name}, u_photo=#{u_photo} where u_idx=#{u_idx} 
</update>

<select id="selectUserById" resultMap="userInfoMap">
	select * from user where u_id=#{u_id}
</select>
<select id="selectIdxById">
	select u_idx from user where u_id=#{u_id}
</select>

<select id="chkMaster" resultType="String">
	select pc_masterYn from run_bike.user, run_bike.participation where user.u_idx = participation.u_idx and user.u_idx = #{u_idx};
</select>
<select id="selectLeaveById" resultType="boolean">
	select u_leave from run_bike.user where u_id=#{u_id}
</select>

<select id="getRecord" resultType="map">
	    select count(r_idx) as total_count, round(sum(r_riding_time),0) as total_time,round(sum(r_riding_km),1) as total_KM,round(avg(r_riding_km),1) as avg_KM, round(avg(r_riding_time),1) as avg_time
	from run_bike.user u
	inner join run_bike.record r
	where u.u_idx = r.u_idx and u.u_idx = #{u_idx}
</select>
<select id="getRecentRecord" resultType="map">
	select r_idx, r_finish, date_format(r_riding_date,'%Y-%m-%d') as r_riding_date, r_riding_km, r_riding_time 
	from run_bike.record 
	inner join run_bike.user
	on user.u_idx = #{u_idx}
	order by r_riding_date desc
	limit 0,5
</select>

<select id="getpartyRecord" resultType="map">
	select count(*) as cnt ,p.p_name, p.p_start_info, p.p_end_info, date_format(p.p_time,'%Y-%m-%d') as p_time, p.p_riding_km, pc.pc_finishYN
from run_bike.participation pc
	left outer join run_bike.user u on pc.u_idx = u.u_idx
    left outer join run_bike.party p on pc.p_num = p.p_num
where pc.u_idx = #{u_idx}
</select>
<update id="reChkVerify">
	update user set u_verify=true where u_id=#{param1}
</update>

<update id="chkLeave">
	update user set u_leave=true where u_idx=#{u_idx}
</update>
<update id="updateIsSns">
	update user set u_sns=true where u_idx=#{u_idx}
</update>
</mapper>